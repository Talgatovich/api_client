# coding: utf-8

"""
    MDES Digital Enablement API

    These APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously. <br><br> **Authentication** <br><br> Mastercard uses OAuth 1.0a with body hash extension for authenticating the API clients. This requires every request that you send to  Mastercard to be signed with an RSA private key. A private-public RSA key pair must be generated consisting of: <br><br> 1. A private key for the OAuth signature for API requests. It is recommended to keep the private key in a password-protected or hardware keystore. <br> 2. A public key is shared with Mastercard during the project setup process through either a certificate signing request (CSR) or the API Key Generator. Mastercard will use the public key to verify the OAuth signature that is provided on every API call.<br>  An OAUTH1.0a signer library is available on [GitHub](https://github.com/Mastercard/oauth1-signer-java) <br><br> **Encryption** <br><br> All communications between Issuer web service and the Mastercard gateway is encrypted using TLS. <br><br> **Additional Encryption of Sensitive Data** <br><br> In addition to the OAuth authentication, when using MDES Digital Enablement Service, any PCI sensitive and all account holder Personally Identifiable Information (PII) data must be encrypted. This requirement applies to the API fields containing encryptedData. Sensitive data is encrypted using a symmetric session (one-time-use) key. The symmetric session key is then wrapped with an RSA Public Key supplied by Mastercard during API setup phase (the Customer Encryption Key). <br>  Java Client Encryption Library available on [GitHub](https://github.com/Mastercard/client-encryption-java) 

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.authentication_methods import AuthenticationMethods
from openapi_client.models.product_config import ProductConfig
from openapi_client.models.token_detail import TokenDetail
from openapi_client.models.token_info import TokenInfo
from typing import Optional, Set
from typing_extensions import Self

class TokenizeResponseSchema(BaseModel):
    """
    TokenizeResponseSchema
    """ # noqa: E501
    response_host: Optional[StrictStr] = Field(default=None, description="The MasterCard host that originated the request. Future calls in the same conversation may be routed to this host. ", alias="responseHost")
    response_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the response. ", alias="responseId")
    decision: Optional[StrictStr] = Field(default=None, description="The tokenization decision for this digitization request. Must be either APPROVED (Digitization request was approved), DECLINED (Digitization request was declined) OR REQUIRE_ADDITIONAL_AUTHENTICATION Digitization request was approved but optionally requires additional authentication. One or more Authentication methods may be provided). ")
    authentication_methods: Optional[List[AuthenticationMethods]] = Field(default=None, alias="authenticationMethods")
    token_unique_reference: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="The unique reference allocated to the new Token. Serves as a unique identifier for all subsequent queries or management functions relating to this Token. Provided if the decision was APPROVED or REQUIRE_ADDITIONAL_AUTHENTICATION. ", alias="tokenUniqueReference")
    pan_unique_reference: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="The unique reference allocated to the Account Primary Account Number. Provided if the decision was APPROVED or REQUIRE_ADDITIONAL_AUTHENTICATION. ", alias="panUniqueReference")
    product_config: Optional[ProductConfig] = Field(default=None, alias="productConfig")
    token_info: Optional[TokenInfo] = Field(default=None, alias="tokenInfo")
    token_detail: Optional[TokenDetail] = Field(default=None, alias="tokenDetail")
    supports_authentication: Optional[StrictBool] = Field(default=None, description="(required)Flag to indicate if the issuer supports authentication of the cardholder on the token. Must be one of:   - TRUE   - FALSE ", alias="supportsAuthentication")
    __properties: ClassVar[List[str]] = ["responseHost", "responseId", "decision", "authenticationMethods", "tokenUniqueReference", "panUniqueReference", "productConfig", "tokenInfo", "tokenDetail", "supportsAuthentication"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TokenizeResponseSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in authentication_methods (list)
        _items = []
        if self.authentication_methods:
            for _item_authentication_methods in self.authentication_methods:
                if _item_authentication_methods:
                    _items.append(_item_authentication_methods.to_dict())
            _dict['authenticationMethods'] = _items
        # override the default output from pydantic by calling `to_dict()` of product_config
        if self.product_config:
            _dict['productConfig'] = self.product_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of token_info
        if self.token_info:
            _dict['tokenInfo'] = self.token_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of token_detail
        if self.token_detail:
            _dict['tokenDetail'] = self.token_detail.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TokenizeResponseSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "responseHost": obj.get("responseHost"),
            "responseId": obj.get("responseId"),
            "decision": obj.get("decision"),
            "authenticationMethods": [AuthenticationMethods.from_dict(_item) for _item in obj["authenticationMethods"]] if obj.get("authenticationMethods") is not None else None,
            "tokenUniqueReference": obj.get("tokenUniqueReference"),
            "panUniqueReference": obj.get("panUniqueReference"),
            "productConfig": ProductConfig.from_dict(obj["productConfig"]) if obj.get("productConfig") is not None else None,
            "tokenInfo": TokenInfo.from_dict(obj["tokenInfo"]) if obj.get("tokenInfo") is not None else None,
            "tokenDetail": TokenDetail.from_dict(obj["tokenDetail"]) if obj.get("tokenDetail") is not None else None,
            "supportsAuthentication": obj.get("supportsAuthentication")
        })
        return _obj


